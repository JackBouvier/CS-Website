{"rule":"UPPERCASE_SENTENCE_START","sentence":"^\\Qsize() (int) number of elements in the store isEmpty() (boolean) whether the list is empty\\E$"}
{"rule":"UPPERCASE_SENTENCE_START","sentence":"^\\Qsize() (int) number of elements in the store isEmpty() (boolean) whether the list is empty isEmpty() (boolean) whether the list is empty isEmpty() (boolean) whether the list is empty isEmpty() (boolean) whether the list is empty isEmpty() (boolean) whether the list is empty\\E$"}
{"rule":"I_LOWERCASE","sentence":"^\\Qsize() (int) number of elements in the store isEmpty() (boolean) whether the list is empty get(i) return element at index i set(i,e) replace element at index i with element e and return the replaced element add(i,e) insert element e at index i and shift up elements with indexes >= i remove(i) remove and return the element at index i and shift down indexes >= i\\E$"}
{"rule":"UPPERCASE_SENTENCE_START","sentence":"^\\Qsize() (int) number of elements in the store isEmpty() (boolean) whether the list is empty get(i) return element at index i set(i,e) replace the element at i with e and return the replaced element add(i,e) insert element e at index i and shift up elements with indexes >= i remove(i) remove and return the element at index i and shift down indexes >= i\\E$"}
{"rule":"I_LOWERCASE","sentence":"^\\Qsize() (int) number of elements in the store isEmpty() (boolean) whether the list is empty get(i) return element at index i set(i,e) replace the element at i with e and return the replaced element add(i,e) insert element e at index i and shift up elements with indexes >= i remove(i) remove and return the element at index i and shift down indexes >= i\\E$"}
{"rule":"ENGLISH_WORD_REPEAT_RULE","sentence":"^\\QA[j+1] = A[j] A[i] e n n + 1\\E$"}
{"rule":"ENGLISH_WORD_REPEAT_RULE","sentence":"^\\QA[j+1] = A[j] A[i] e n n + 1 remove.i: int.\\E$"}
